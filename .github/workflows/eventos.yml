# This is a GitHub Actions workflow for the Eventos project.
name: CI

on:
    push:
        branches: [ 'main' ]
        tags: [ 'v*.*.*' ]
    pull_request:
        branches: [ 'main' ]
    workflow_dispatch:

# Concurrency settings ensure that only one instance of this workflow runs at a time per branch.
concurrency:
    group: "${{ github.ref }}"
    cancel-in-progress: true

# Global environment variables for the workflow.
env:
    # The analyzers to be excluded from the Static Application Security Testing (SAST).
    SAST_EXCLUDED_ANALYZERS: phpcs-security-audit-sast
    NODE_VERSION: 20.x

permissions:
    contents: write
    pull-requests: write
    issues: write

jobs:
    # The commit-lint job ensures that commit messages follow the conventional commit format.
    lint_commit_messages:
        runs-on: ubuntu-latest

        container:
            image: node:20

        if: github.event_name == 'pull_request'

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 50

            # Installs the commitlint CLI and the conventional config.
            -   name: Install commitlint
                run: npm install -g @commitlint/cli @commitlint/config-conventional

            # Lints the pull request title.
            -   name: Lint commit message
                run: echo "${{ github.event.pull_request.title }}" | npx commitlint

    npm_dependencies:
        needs: lint_commit_messages

        runs-on: ubuntu-latest

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 50

            -   name: Setup Node.js ${{ env.NODE_VERSION }} and cache
                uses: actions/setup-node@v3
                with:
                    node-version: ${{ env.NODE_VERSION }}
                    cache: 'npm'

            -   name: Get npm cache directory
                id: npm-cache-dir
                shell: bash
                run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

            -   name: Cache npm dependencies
                uses: actions/cache@v3
                id: npm-cache
                with:
                    path: ${{ steps.npm-cache-dir.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-node-

            -   name: Install build-essential
                run: sudo apt-get update && sudo apt-get install -y build-essential

            -   name: Install npm dependencies
                run: |
                    if [[ -d node_modules && -n $(npm ci --dry-run 2>/dev/null) ]]; then
                      echo "Dependencies are already installed and up-to-date"
                    else
                      npm ci
                    fi

            -   name: Copy environment file
                run: cp .env.example .env

    lint_codebase:
        needs: npm_dependencies

        runs-on: ubuntu-latest

        if: github.event_name == 'pull_request'

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 50

            -   name: Get npm cache directory
                id: npm-cache-dir
                shell: bash
                run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

            -   name: Restore npm dependencies
                uses: actions/cache@v3
                id: npm-cache
                with:
                    path: ${{ steps.npm-cache-dir.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-node-

            -   name: Install npm dependencies
                run: |
                    if [[ -d node_modules && -n $(npm ci --dry-run 2>/dev/null) ]]; then
                      echo "Dependencies are already installed and up-to-date"
                    else
                      npm ci
                    fi

            -   name: Lint codebase
                run: npx eslint --ignore-pattern .gitignore .

    njsscan_sast_check:
        runs-on: ubuntu-latest

        if: github.event_name == 'pull_request'

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 50

            -   name: Perform njsscan SAST check
                uses: ajinabraham/njsscan-action@v7
                with:
                    args: '.'

    semgrep_sast_scan:
        runs-on: ubuntu-latest

        container:
            image: returntocorp/semgrep

        if: github.event_name == 'pull_request' && (github.actor != 'dependabot[bot]')

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 50

            -   name: Perform semgrep SAST scan
                run: semgrep --config=p/r2c-ci --json --exclude="${{ env.SAST_EXCLUDED_ANALYZERS }}" .
                env:
                    SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    secret_detection:
        runs-on: ubuntu-latest

        if: github.event_name == 'pull_request'

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Remove gitleaks.tmp if it exists
                continue-on-error: true
                run: rm -f /tmp/gitleaks.tmp || echo "gitleaks.tmp has already been removed."

            -   name: Perform secret detection
                uses: gitleaks/gitleaks-action@v2
                env:
                    GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
                    GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

    release_version:
        runs-on: ubuntu-latest

        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

        timeout-minutes: 60

        steps:
            -   name: Check out source code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 50

            -   name: Setup Node.js ${{ env.NODE_VERSION }} and cache
                uses: actions/setup-node@v3
                with:
                    node-version: ${{ env.NODE_VERSION }}
                    cache: 'npm'

            -   name: Get npm cache directory
                id: npm-cache-dir
                shell: bash
                run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

            -   name: Cache npm dependencies
                uses: actions/cache@v3
                id: npm-cache
                with:
                    path: ${{ steps.npm-cache-dir.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-node-

            -   name: Install npm dependencies
                run: |
                    if [[ -d node_modules && -n $(npm ci --dry-run 2>/dev/null) ]]; then
                      echo "Dependencies are already installed and up-to-date"
                    else
                      npm ci
                    fi

            -   name: Create Changelog File
                run: touch CHANGELOG.md

            -   name: Install semantic-release packages
                run: npm install @semantic-release/github @semantic-release/changelog

            -   name: Run Semantic Release
                run: npx semantic-release
                env:
                    GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}

            -   name: Upload CHANGELOG.md artifact
                uses: actions/upload-artifact@v4
                if: ${{ success() && contains(github.event.head_commit.message, 'chore(release):') }}
                with:
                    name: changelog
                    path: CHANGELOG.md
